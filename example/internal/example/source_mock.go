// Code generated by pamgen version (devel). DO NOT EDIT.

package example

import (
	"github.com/golang/mock/gomock"
	"github.com/sirkon/deepequal"
	"reflect"
)

// SourceMock interface github.com/sirkon/fenneg/example/internal/example.Source mock
type SourceMock struct {
	ctrl     *gomock.Controller
	recorder *SourceMockRecorder
}

// SourceMockRecorder records expected calls of github.com/sirkon/fenneg/example/internal/example.Source
type SourceMockRecorder struct {
	mock *SourceMock
}

// NewSourceMock creates SourceMock instance
func NewSourceMock(ctrl *gomock.Controller) *SourceMock {
	mock := &SourceMock{
		ctrl: ctrl,
	}
	mock.recorder = &SourceMockRecorder{mock: mock}
	return mock
}

// EXPECT returns expected calls recorder
func (m *SourceMock) EXPECT() *SourceMockRecorder {
	return m.recorder
}

// Fixeds method to implement github.com/sirkon/fenneg/example/internal/example.Source
func (m *SourceMock) Fixeds(a bool, b int32, c uint16, d float64, e [12]byte) (err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fixeds", a, b, c, d, e)
	err, _ = ret[0].(error)
	return err
}

// Fixeds register expected call of method github.com/sirkon/fenneg/example/internal/example.Source.Fixeds
func (mr *SourceMockRecorder) Fixeds(a, b, c, d, e any) *gomock.Call {
	if a != nil {
		if _, ok := a.(gomock.Matcher); !ok {
			a = deepequal.NewEqMatcher(a)
		}
	}

	if b != nil {
		if _, ok := b.(gomock.Matcher); !ok {
			b = deepequal.NewEqMatcher(b)
		}
	}

	if c != nil {
		if _, ok := c.(gomock.Matcher); !ok {
			c = deepequal.NewEqMatcher(c)
		}
	}

	if d != nil {
		if _, ok := d.(gomock.Matcher); !ok {
			d = deepequal.NewEqMatcher(d)
		}
	}

	if e != nil {
		if _, ok := e.(gomock.Matcher); !ok {
			e = deepequal.NewEqMatcher(e)
		}
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fixeds", reflect.TypeOf((*SourceMock)(nil).Fixeds), a, b, c, d, e)
}

// FixedsWhatever records a call with arbitrary arguments.
func (mr *SourceMockRecorder) FixedsWhatever() *gomock.Call {
	return mr.Fixeds(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any())
}

// Vars method to implement github.com/sirkon/fenneg/example/internal/example.Source
func (m *SourceMock) Vars(a string, b []byte, c int16, d uint32, e EncDec, id Index) (err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vars", a, b, c, d, e, id)
	err, _ = ret[0].(error)
	return err
}

// Vars register expected call of method github.com/sirkon/fenneg/example/internal/example.Source.Vars
func (mr *SourceMockRecorder) Vars(a, b, c, d, e, id any) *gomock.Call {
	if a != nil {
		if _, ok := a.(gomock.Matcher); !ok {
			a = deepequal.NewEqMatcher(a)
		}
	}

	if b != nil {
		if _, ok := b.(gomock.Matcher); !ok {
			b = deepequal.NewEqMatcher(b)
		}
	}

	if c != nil {
		if _, ok := c.(gomock.Matcher); !ok {
			c = deepequal.NewEqMatcher(c)
		}
	}

	if d != nil {
		if _, ok := d.(gomock.Matcher); !ok {
			d = deepequal.NewEqMatcher(d)
		}
	}

	if e != nil {
		if _, ok := e.(gomock.Matcher); !ok {
			e = deepequal.NewEqMatcher(e)
		}
	}

	if id != nil {
		if _, ok := id.(gomock.Matcher); !ok {
			id = deepequal.NewEqMatcher(id)
		}
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vars", reflect.TypeOf((*SourceMock)(nil).Vars), a, b, c, d, e, id)
}

// VarsWhatever records a call with arbitrary arguments.
func (mr *SourceMockRecorder) VarsWhatever() *gomock.Call {
	return mr.Vars(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any())
}
